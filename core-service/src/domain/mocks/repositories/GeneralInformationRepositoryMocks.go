// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jabardigitalservice/portal-jabar-services/core-service/src/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// GeneralInformationRepository is an autogenerated mock type for the GeneralInformationRepository type
type GeneralInformationRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *GeneralInformationRepository) GetByID(ctx context.Context, id int64) (domain.GeneralInformation, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.GeneralInformation
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.GeneralInformation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.GeneralInformation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTx provides a mock function with given fields: _a0
func (_m *GeneralInformationRepository) GetTx(_a0 context.Context) (*sql.Tx, error) {
	ret := _m.Called(_a0)

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1, _a2
func (_m *GeneralInformationRepository) Store(_a0 context.Context, _a1 domain.StorePublicService, _a2 *sql.Tx) (int64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, domain.StorePublicService, *sql.Tx) int64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StorePublicService, *sql.Tx) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSlug provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GeneralInformationRepository) UpdateSlug(_a0 context.Context, _a1 domain.StorePublicService, _a2 int64, _a3 *sql.Tx) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StorePublicService, int64, *sql.Tx) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGeneralInformationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGeneralInformationRepository creates a new instance of GeneralInformationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGeneralInformationRepository(t mockConstructorTestingTNewGeneralInformationRepository) *GeneralInformationRepository {
	mock := &GeneralInformationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
