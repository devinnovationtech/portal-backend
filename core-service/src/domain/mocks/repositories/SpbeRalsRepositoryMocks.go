// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jabardigitalservice/portal-jabar-services/core-service/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// SpbeRalsRepository is an autogenerated mock type for the SpbeRalsRepository type
type SpbeRalsRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx
func (_m *SpbeRalsRepository) Fetch(ctx context.Context) ([]domain.SpbeRals, error) {
	ret := _m.Called(ctx)

	var r0 []domain.SpbeRals
	if rf, ok := ret.Get(0).(func(context.Context) []domain.SpbeRals); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SpbeRals)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSpbeRalsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpbeRalsRepository creates a new instance of SpbeRalsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpbeRalsRepository(t mockConstructorTestingTNewSpbeRalsRepository) *SpbeRalsRepository {
	mock := &SpbeRalsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
