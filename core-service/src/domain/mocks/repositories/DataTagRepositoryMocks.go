// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jabardigitalservice/portal-jabar-services/core-service/src/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DataTagRepository is an autogenerated mock type for the DataTagRepository type
type DataTagRepository struct {
	mock.Mock
}

// DeleteDataTag provides a mock function with given fields: ctx, id, _a2, tx
func (_m *DataTagRepository) DeleteDataTag(ctx context.Context, id int64, _a2 string, tx *sql.Tx) error {
	ret := _m.Called(ctx, id, _a2, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, *sql.Tx) error); ok {
		r0 = rf(ctx, id, _a2, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchDataTags provides a mock function with given fields: ctx, id, _a2
func (_m *DataTagRepository) FetchDataTags(ctx context.Context, id int64, _a2 string) ([]domain.DataTag, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 []domain.DataTag
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []domain.DataTag); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DataTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreDataTag provides a mock function with given fields: ctx, dt, tx
func (_m *DataTagRepository) StoreDataTag(ctx context.Context, dt *domain.DataTag, tx *sql.Tx) error {
	ret := _m.Called(ctx, dt, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DataTag, *sql.Tx) error); ok {
		r0 = rf(ctx, dt, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataTagRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataTagRepository creates a new instance of DataTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataTagRepository(t mockConstructorTestingTNewDataTagRepository) *DataTagRepository {
	mock := &DataTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
