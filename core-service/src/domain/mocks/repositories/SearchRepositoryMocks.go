// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jabardigitalservice/portal-jabar-services/core-service/src/domain"
	mock "github.com/stretchr/testify/mock"
)

// SearchRepository is an autogenerated mock type for the SearchRepository type
type SearchRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, indices, id, _a3
func (_m *SearchRepository) Delete(ctx context.Context, indices string, id int, _a3 string) error {
	ret := _m.Called(ctx, indices, id, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) error); ok {
		r0 = rf(ctx, indices, id, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, indices, params
func (_m *SearchRepository) Fetch(ctx context.Context, indices string, params *domain.Request) ([]domain.SearchListResponse, int64, interface{}, error) {
	ret := _m.Called(ctx, indices, params)

	var r0 []domain.SearchListResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Request) []domain.SearchListResponse); ok {
		r0 = rf(ctx, indices, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SearchListResponse)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.Request) int64); ok {
		r1 = rf(ctx, indices, params)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 interface{}
	if rf, ok := ret.Get(2).(func(context.Context, string, *domain.Request) interface{}); ok {
		r2 = rf(ctx, indices, params)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(interface{})
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, *domain.Request) error); ok {
		r3 = rf(ctx, indices, params)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SearchSuggestion provides a mock function with given fields: ctx, indices, params
func (_m *SearchRepository) SearchSuggestion(ctx context.Context, indices string, params *domain.Request) ([]domain.SuggestResponse, error) {
	ret := _m.Called(ctx, indices, params)

	var r0 []domain.SuggestResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Request) []domain.SuggestResponse); ok {
		r0 = rf(ctx, indices, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SuggestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.Request) error); ok {
		r1 = rf(ctx, indices, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, indices, body
func (_m *SearchRepository) Store(ctx context.Context, indices string, body *domain.Search) error {
	ret := _m.Called(ctx, indices, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Search) error); ok {
		r0 = rf(ctx, indices, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, indices, id, body
func (_m *SearchRepository) Update(ctx context.Context, indices string, id int, body *domain.Search) error {
	ret := _m.Called(ctx, indices, id, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *domain.Search) error); ok {
		r0 = rf(ctx, indices, id, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSearchRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSearchRepository creates a new instance of SearchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearchRepository(t mockConstructorTestingTNewSearchRepository) *SearchRepository {
	mock := &SearchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
